Program([FuncDecl(Id(binomialCoeff), [VarDecl(Id(n), NumberType, None, None), VarDecl(Id(k), NumberType, None, None)], None), FuncDecl(Id(printPascal), [VarDecl(Id(n), NumberType, None, None)], Block([VarDecl(Id(line), NumberType, None, NumLit(0.0)), For(Id(line), BinaryOp(>=, Id(line), Id(n)), NumLit(1.0), Block([VarDecl(Id(i), NumberType, None, NumLit(0.0)), For(Id(i), BinaryOp(>, Id(i), Id(line)), NumLit(1.0), CallStmt(Id(writeString), [BinaryOp(..., StringLit( ), CallExpr(Id(binomialCoeff), [Id(line), Id(i)]))])), CallStmt(Id(writeString), [StringLit(\\n)])]))])), FuncDecl(Id(binomialCoeff), [VarDecl(Id(n), NumberType, None, None), VarDecl(Id(k), NumberType, None, None)], Block([VarDecl(Id(res), NumberType, None, NumLit(1.0)), If((BinaryOp(>, Id(k), BinaryOp(-, Id(n), Id(k))), AssignStmt(Id(k), BinaryOp(-, Id(n), Id(k)))), [], None), VarDecl(Id(i), NumberType, None, NumLit(0.0)), For(Id(i), BinaryOp(>=, Id(i), Id(k)), NumLit(1.0), Block([AssignStmt(Id(res), BinaryOp(*, Id(res), BinaryOp(-, Id(n), Id(i)))), AssignStmt(Id(res), BinaryOp(/, Id(res), BinaryOp(+, Id(i), NumLit(1.0))))])), Return(Id(res))])), FuncDecl(Id(main), [], Block([VarDecl(Id(n), NumberType, None, NumLit(7.0)), CallStmt(Id(printPascal), [Id(n)])]))])