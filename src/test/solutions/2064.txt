Program([FuncDecl(Id(main), [], Block([VarDecl(Id(ord1), NumberType, None, None), VarDecl(Id(ord2), NumberType, None, None), VarDecl(Id(ord3), NumberType, None, None), VarDecl(Id(total_sum), NumberType, None, None), CallStmt(Id(writeString), [StringLit(All the Armstrong numbers between 1 to 1000 : )]), VarDecl(Id(num), NumberType, None, NumLit(1.0)), For(Id(num), BinaryOp(>, Id(num), NumLit(1000.0)), NumLit(1.0), Block([If((BinaryOp(<=, Id(num), NumLit(9.0)), Block([CallStmt(Id(writeString), [BinaryOp(..., Id(num), StringLit( ))])])), [], Block([AssignStmt(Id(ord1), BinaryOp(%, Id(num), NumLit(10.0))), AssignStmt(Id(ord2), BinaryOp(/, BinaryOp(-, BinaryOp(%, Id(num), NumLit(100.0)), Id(ord1)), NumLit(10.0))), AssignStmt(Id(ord3), BinaryOp(/, BinaryOp(-, BinaryOp(%, Id(num), NumLit(1000.0)), Id(ord2)), NumLit(100.0))), AssignStmt(Id(total_sum), BinaryOp(+, BinaryOp(+, BinaryOp(*, BinaryOp(*, Id(ord1), Id(ord1)), Id(ord1)), BinaryOp(*, BinaryOp(*, Id(ord2), Id(ord2)), Id(ord2))), BinaryOp(*, BinaryOp(*, Id(ord3), Id(ord3)), Id(ord3)))), If((BinaryOp(==, Id(total_sum), Id(num)), Block([CallStmt(Id(writeString), [BinaryOp(..., Id(num), StringLit( ))])])), [], None)]))]))]))])