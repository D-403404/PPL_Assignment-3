
func swap(number a, number b)
begin
    number temp <- a
    a <- b
    b <- temp
end

func partition(number arr[10], number start, number _end)
begin
	number pivot <- arr[start]

	number count <- 0
    number i
    number j
    i <- start + 1
	for i until i > _end by 1
		if (arr[i] <= pivot)
			count <- count + 1

	## Giving pivot element its correct position
	number pivotIndex <- start + count
	swap(arr[pivotIndex], arr[start])

	## Sorting left and right parts of the pivot element
    i <- start
    j <- _end

	return pivotIndex
end

func quickSort(number arr[10], number start, number _end)
begin

	## base case
	if (start >= _end)
		return

	## partitioning the array
	number p <- partition(arr, start, _end)

	## Sorting the left part
	quickSort(arr, start, p - 1)

	## Sorting the right part
	quickSort(arr, p + 1, _end)
end

func main()
begin
    number arr[10] <- [1,4,1,5,7,8,9,3,2,10]
    quickSort(arr, arr[0], arr[10])
end
